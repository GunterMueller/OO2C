#ifndef _MODULE_OOC_C_ConvertDecl_
#define _MODULE_OOC_C_ConvertDecl_

#include <__typemap.h>
#include <RT0.oh>
#include <OOC/Repository.oh>
#include <OOC/SymbolTable.oh>
#include <OOC/C/DeclWriter.oh>
#include <RT0.oh>
#include <Object.oh>
#include <Exception.oh>
extern OOC_C_DeclWriter__Type OOC_C_ConvertDecl__ConvertType(OOC_C_DeclWriter__Writer w, OOC_SymbolTable__Type resolvedType, OOC_SymbolTable__Type type);
extern void OOC_C_ConvertDecl__ConvertSymTab(OOC_C_DeclWriter__Writer w, OOC_Repository__Module m, OOC_SymbolTable__Module symTab, ADT_Dictionary_AddressKey__Dictionary exports, OOC_CHAR8 writeExported);
extern OOC_C_DeclWriter__Declaration OOC_C_ConvertDecl__GetProc(OOC_C_DeclWriter__Writer w, OOC_SymbolTable__ProcDecl procDecl, OOC_CHAR8 nestedPrototype);
extern OOC_C_DeclWriter__Declaration OOC_C_ConvertDecl__GetDecl(OOC_C_DeclWriter__Writer w, OOC_SymbolTable__Declaration decl);
extern OOC_C_DeclWriter__Type OOC_C_ConvertDecl__GetTypeRef(OOC_C_DeclWriter__Writer w, OOC_SymbolTable__Type type);
extern OOC_C_DeclWriter__Declaration OOC_C_ConvertDecl__GetPointerDecl(OOC_C_DeclWriter__Writer w, OOC_SymbolTable__VarDecl paramDecl);
extern void OOC_OOC_C_ConvertDecl_init(void);
extern void OOC_OOC_C_ConvertDecl_open(RT0__Module client);
extern void OOC_OOC_C_ConvertDecl_destroy(void);
extern void OOC_OOC_C_ConvertDecl_close(RT0__Module client);

/* run-time meta data */
#endif /* _MODULE_OOC_C_ConvertDecl_ */

/* --- */
